geom_sf(data = district,fill = NA)+
scale_fill_viridis()+
labs(title = "MAE distribution") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = district, fill = "grey90") +
geom_sf(data = nhoods, aes(colour = q5(price)),
show.legend = "point", size = .35) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"price"),
name="Quintile\nBreaks") +
labs(title="Airbnb Listed Price, Amsterdam") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = district, fill = "grey90") +
geom_sf(data = nhoods, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"price"),
name="Quintile\nBreaks") +
labs(title="Airbnb Listed Price, Amsterdam") +
mapTheme()
palette5 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "purple")
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = district, fill = "grey90") +
geom_sf(data = nhoods, aes(colour = q5(price)),
show.legend = "point", size = .75) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"price"),
name="Quintile\nBreaks") +
labs(title="Airbnb Listed Price, Amsterdam") +
mapTheme()
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = district, fill = "grey90") +
geom_sf(data = nhoods, aes(colour = q5(price)),
show.legend = "point", size = .55) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"price"),
name="Quintile\nBreaks") +
labs(title="Airbnb Listed Price, Amsterdam") +
mapTheme()
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415')
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(viridis)
library(cbsodataR)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette4 <- c("#005B96", "#FFD700", "#E63946", "#F0F0F0")
palette5 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "purple")
palette6 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#F0F0F0")
palette7 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F0F0F0")
palette8 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F4A261", "#F0F0F0")
# import planning district and housing data
district <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/neighbourhoods.geojson") %>%
#dplyr::select(DIST_NAME,ABBREV) %>% #Select data for later prediction
st_transform('EPSG:7415')
nhoods_0 <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415')
housing_value <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/housing_value_ams.geojson") %>%
st_transform('EPSG:7415') %>%
select(AvrVal)
housing_value$ID0 <- seq.int(nrow(housing_value))
housing_value_df <- housing_value %>% st_drop_geometry()
nhoods <- st_join(nhoods_0, district)
nhoods <-  transform(nhoods, price = as.numeric(price)) %>%
filter(price!= 0) %>%
st_intersection(district)
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415')
ggplot()+
geom_sf(data = nhoods)+
geom_sf(data = district , fill = NA)
View(listing_details)
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,Bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
View(listing_details)
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )%>%
na.omit()
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )%>%
drop_na()
View(listing_details)
na.omit(listing_details)
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
drop_na()%>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
na.omit()
View(listing_details)
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
listing_details = lapply(listing_details, function(x) {x[x == ""] <- NA})
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
listing_details <- lapply(listing_details, function(x) {x[x == ""] <- NA})
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
listing_details <- lapply(listing_details, function(x) {x[x == ""] <- NA})%>%
as_data_frame()%>%
na.omit()
listing_details<- st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
listing_details <- lapply(listing_details, function(x) {x[x == ""] <- NA})%>%
as_data_frame()
View(listing_details)
listing_details<- read.csv("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv",na.strings = c("", "NA"))
View(listing_details)
listing_details<- read.csv("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv",na.strings = c("", "NA")) %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month ) %>%
na.omit()
View(listing_details)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(viridis)
library(cbsodataR)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette4 <- c("#005B96", "#FFD700", "#E63946", "#F0F0F0")
palette5 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "purple")
palette6 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#F0F0F0")
palette7 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F0F0F0")
palette8 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F4A261", "#F0F0F0")
listing_details<- read.csv("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv",na.strings = c("", "NA"))
listing_details<- read.csv("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv",na.strings = c("", "NA")) %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month ) %>%
na.omit()
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(viridis)
library(cbsodataR)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette4 <- c("#005B96", "#FFD700", "#E63946", "#F0F0F0")
palette5 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "purple")
palette6 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#F0F0F0")
palette7 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F0F0F0")
palette8 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F4A261", "#F0F0F0")
# import planning district and housing data
district <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/neighbourhoods.geojson") %>%
#dplyr::select(DIST_NAME,ABBREV) %>% #Select data for later prediction
st_transform('EPSG:7415')
nhoods_0 <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415')
housing_value <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/housing_value_ams.geojson") %>%
st_transform('EPSG:7415') %>%
select(AvrVal)
housing_value$ID0 <- seq.int(nrow(housing_value))
housing_value_df <- housing_value %>% st_drop_geometry()
nhoods <- st_join(nhoods_0, district)
nhoods <-  transform(nhoods, price = as.numeric(price)) %>%
filter(price!= 0) %>%
st_intersection(district)
listing_details<- read.csv("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv",na.strings = c("", "NA")) %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month ) %>%
na.omit()
listing_details <- lapply(listing_details, function(x) {x[x == ""] <- NA})%>%
as_data_frame()%>%
na.omit()
ggplot()+
geom_sf(data = nhoods)+
geom_sf(data = district , fill = NA)
temp_nearest <- st_nearest_feature(nhoods,housing_value) %>% as_data_frame()%>%rename(ID0 = value)%>%left_join(housing_value_df, by = 'ID0')
nhoods <- cbind(nhoods, temp_nearest)
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = district, fill = "grey90") +
geom_sf(data = nhoods, aes(colour = q5(price)),
show.legend = "point", size = .55) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"price"),
name="Quintile\nBreaks") +
labs(title="Airbnb Listed Price, Amsterdam") +
mapTheme()
# 1.Load high-rise data with 3 attributes: height, year, and geometry
highrise.sf <-
st_read("https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=HOOGBOUW_PUNT&THEMA=hoogbouw") %>%
dplyr::select(Hoogte, Jaar, geometry) %>%
rename(
height = Hoogte,
year = Jaar
)%>%
st_transform('EPSG:7415')
# 2.Load green roof data with 2 attributes
greenroof.sf <-
st_read("https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=GROENE_DAKEN&THEMA=groene_daken") %>%
dplyr::select(Oppervlakte_m2, geometry) %>%
rename(surface = Oppervlakte_m2)%>%
st_transform('EPSG:7415')
# 3.Load wall art data
wallart.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=WANDKUNST&THEMA=wandkunst')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 4.Load market data
market.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=MARKTEN&THEMA=markten')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 5.Load swimming water data
swimming.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=ZWEMWATER&THEMA=zwemwater')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 6.Load tram and metro data
tram_metro.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=TRAMMETRO_LIJNEN_2022&THEMA=trammetro')%>%
dplyr::select(Modaliteit, geometry) %>%
rename(modality = Modaliteit)%>%
st_transform('EPSG:7415')
# 7.Load flood data
flood.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=KLIMAAT_OVERSTROMING&THEMA=klimaatadaptatie')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 8.Load parking pressure data
parking.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=PARKEERDRUK_BUURTEN&THEMA=parkeerdruk')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 1.high-rise
nhoods$highrise.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(highrise.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
highrise_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 1),
highrise_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 2),
highrise_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 3),
highrise_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 4),
highrise_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("highrise_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of high-rise") +
theme_light()
# 2.green roofs
nhoods$greenroof.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(greenroof.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
greenroof_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 1),
greenroof_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 2),
greenroof_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 3),
greenroof_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 4),
greenroof_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("greenroof_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of green roofs") +
theme_light()
# 3.wall art
nhoods$wallart.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(wallart.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
wallart_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 1),
wallart_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 2),
wallart_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 3),
wallart_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 4),
wallart_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("wallart_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of wall art") +
theme_light()
# 4.wall art
nhoods$wallart.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(wallart.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
wallart_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 1),
wallart_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 2),
wallart_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 3),
wallart_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 4),
wallart_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("wallart_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of wall art") +
theme_light()
# 4.market data
nhoods$market.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(market.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
market_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 1),
market_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 2),
market_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 3),
market_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 4),
market_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("market_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of markets") +
theme_light()
# 5.swimming pool data
nhoods$swimming.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(swimming.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
swimming_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 1),
swimming_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 2),
swimming_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 3),
swimming_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 4),
swimming_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("swimming_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of swimming pools") +
theme_light()
nhoods %>%
st_drop_geometry() %>%
ggplot(aes(AvrVal, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
labs(title = "Price as a function of House Price") +
theme_light()
# Load acs data, need data selection here
ams_census <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/ams_census.geojson") %>%
st_transform('EPSG:7415') %>%
dplyr::select(postcode4,geometry,aantal_inwoners,aantal_mannen,aantal_vrouwen,aantal_inwoners_0_tot_15_jaar,aantal_inwoners_15_tot_25_jaar,aantal_inwoners_25_tot_45_jaar,aantal_inwoners_45_tot_65_jaar,aantal_inwoners_65_jaar_en_ouder,percentage_nederlandse_achtergrond,percentage_westerse_migr_achtergr,percentage_niet_westerse_migr_achtergr,gemiddelde_huishoudensgrootte,percentage_laag_inkomen_huishouden) %>%
rename(residents = aantal_inwoners,
male_residents = aantal_mannen,
famale_residents = aantal_vrouwen,
pct_dutch_bkg = percentage_nederlandse_achtergrond,
pct_wes_bkg = percentage_westerse_migr_achtergr,
pct_nonwes_bkg = percentage_niet_westerse_migr_achtergr,
avr_fam_size = gemiddelde_huishoudensgrootte,
low_income_pct = percentage_laag_inkomen_huishouden)
nhoods <- st_join(nhoods,ams_census)
nhoods_sub <- nhoods%>%
select(price, postcode4,number_of_reviews,calculated_host_listings_count,AvrVal,highrise.Buffer,highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn1,pct_dutch_bkg,pct_nonwes_bkg,avr_fam_size,low_income_pct)
numericVars <-
select_if(st_drop_geometry(nhoods_sub), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("#005B96", "white", "#FFD700"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables")
cor.test(nhoods$highrise_nn3,
nhoods$price,
method = "pearson")
table(nhoods$cleaning_fee)
table(nhoods)
