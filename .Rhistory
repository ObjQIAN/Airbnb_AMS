name="Quintile\nBreaks") +
labs(title="Airbnb Listed Price, Amsterdam") +
mapTheme()
# 1.Load high-rise data with 3 attributes: height, year, and geometry
highrise.sf <-
st_read("https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=HOOGBOUW_PUNT&THEMA=hoogbouw") %>%
dplyr::select(Hoogte, Jaar, geometry) %>%
rename(
height = Hoogte,
year = Jaar
)%>%
st_transform('EPSG:7415')
# 2.Load green roof data with 2 attributes
greenroof.sf <-
st_read("https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=GROENE_DAKEN&THEMA=groene_daken") %>%
dplyr::select(Oppervlakte_m2, geometry) %>%
rename(surface = Oppervlakte_m2)%>%
st_transform('EPSG:7415')
# 3.Load wall art data
wallart.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=WANDKUNST&THEMA=wandkunst')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 4.Load market data
market.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=MARKTEN&THEMA=markten')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 5.Load swimming water data
swimming.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=ZWEMWATER&THEMA=zwemwater')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 6.Load tram and metro data
tram_metro.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=TRAMMETRO_LIJNEN_2022&THEMA=trammetro')%>%
dplyr::select(Modaliteit, geometry) %>%
rename(modality = Modaliteit)%>%
st_transform('EPSG:7415')
# 7.Load flood data
flood.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=KLIMAAT_OVERSTROMING&THEMA=klimaatadaptatie')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 8.Load parking pressure data
parking.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=PARKEERDRUK_BUURTEN&THEMA=parkeerdruk')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
View(flood.sf)
plot(flood.sf)
ggplot()+
geom_sf(data = flood.sf)
geom_sf(data = district)
ggplot()+
geom_sf(data = wallart.sf)
geom_sf(data = district)
ggplot()+
geom_sf(data = wallart.sf)+
geom_sf(data = district)
ggplot()+
geom_sf(data = flood.sf)+
geom_sf(data = district)
# 1.Load high-rise data with 3 attributes: height, year, and geometry
highrise.sf <-
st_read("https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=HOOGBOUW_PUNT&THEMA=hoogbouw") %>%
dplyr::select(Hoogte, Jaar, geometry) %>%
rename(
height = Hoogte,
year = Jaar
)%>%
st_transform('EPSG:7415')
# 2.Load green roof data with 2 attributes
greenroof.sf <-
st_read("https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=GROENE_DAKEN&THEMA=groene_daken") %>%
dplyr::select(Oppervlakte_m2, geometry) %>%
rename(surface = Oppervlakte_m2)%>%
st_transform('EPSG:7415')
# 3.Load wall art data
wallart.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=WANDKUNST&THEMA=wandkunst')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 4.Load market data
market.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=MARKTEN&THEMA=markten')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 5.Load swimming water data
swimming.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=ZWEMWATER&THEMA=zwemwater')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 6.Load tram and metro data
tram_metro.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=TRAMMETRO_LIJNEN_2022&THEMA=trammetro')%>%
dplyr::select(Modaliteit, geometry) %>%
rename(modality = Modaliteit)%>%
st_transform('EPSG:7415')
# 7.Load flood data
flood.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=KLIMAAT_OVERSTROMING&THEMA=klimaatadaptatie')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 8.Load parking pressure data
parking.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=PARKEERDRUK_BUURTEN&THEMA=parkeerdruk')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
ggplot()+
geom_sf(data = flood.sf)+
geom_sf(data = district)
ggplot()+
geom_sf(data = flood.sf)
ggplot()+
geom_sf(data = tram_metro.sf)
View(tram_metro.sf)
# 6.Load tram and metro data
tram_metro.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=TRAMMETRO_PUNTEN_2019&THEMA=trammetro')%>%
dplyr::select(Modaliteit, geometry) %>%
rename(modality = Modaliteit)%>%
st_transform('EPSG:7415')
ggplot()+
geom_sf(data = tram_metro.sf)
# 9.Heating supply
heating.sf <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=STADSWARMTEKOUDE_WIJK&THEMA=stadswarmtekoude
')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 9.Heating supply
heating.sf <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=STADSWARMTEKOUDE_WIJK&THEMA=stadswarmtekoude')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
plot(heating.sf)
#13. age
age.sf  <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=BUURTCOMPOST&THEMA=buurtcompost')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
View(age.sf)
#13. age
age.sf  <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=BUURTCOMPOST&THEMA=buurtcompost')%>%
st_transform('EPSG:7415')
View(age.sf)
#13. age
age.sf  <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=BOUWJAAR&THEMA=bouwjaar')%>%
st_transform('EPSG:7415')
View(age.sf)
table(age.sf)
table(age.sf$Bouwjaar)
#13. age
age.sf  <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=BOUWJAAR&THEMA=bouwjaar')%>%
st_transform('EPSG:7415')%>%
rename(age = Bouwjaar)
View(age.sf)
#13. age
age.sf  <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=BOUWJAAR&THEMA=bouwjaar')%>%
st_transform('EPSG:7415')%>%
mutate(age = 2020-Bouwjaar)
View(age.sf)
temp_nearest <- st_nearest_feature(nhoods,housing_value) %>% as_data_frame()%>%rename(ID0 = value)%>%left_join(housing_value_df, by = 'ID0')
nhoods <- cbind(nhoods, temp_nearest)
View(temp_nearest)
View(housing_value_df)
View(housing_value)
#13. age
age.sf  <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=BOUWJAAR&THEMA=bouwjaar')%>%
st_transform('EPSG:7415')%>%
mutate(age = 2020-Bouwjaar)%>%
select(age)
#13. age
age.sf  <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=BOUWJAAR&THEMA=bouwjaar')%>%
st_transform('EPSG:7415')%>%
mutate(age = 2020-Bouwjaar,
ID1 = seq.int(nrow(housing_value)))%>%
select(age,ID1)
temp_near_age <- st_nearest_feature(nhoods,age.sf) %>% as_data_frame()%>%rename(ID1 = value)%>%left_join(age_df, by = 'ID1')
#13. age
age.sf  <-  st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=BOUWJAAR&THEMA=bouwjaar')%>%
st_transform('EPSG:7415')%>%
mutate(age = 2020-Bouwjaar)%>%
select(age)
age.sf$ID1 <- seq.int(nrow(age.sf))
age_df <- age.sf %>% st_drop_geometry()
temp_near_age <- st_nearest_feature(nhoods,age.sf) %>% as_data_frame()%>%rename(ID1 = value)%>%left_join(age_df, by = 'ID1')
#nhoods <- cbind(nhoods, temp_nearest)
View(temp_near_age)
plot(nhoods[13447])
nhoods[13447]
plot(nhoods['13447'])
nhoods[nhoods$id==13447]
plot(nhoods[nhoods$id==13447])
View(nhoods)
# import planning district and housing data
district <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/neighbourhoods.geojson") %>%
#dplyr::select(DIST_NAME,ABBREV) %>% #Select data for later prediction
st_transform('EPSG:7415')
nhoods_0 <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415')
nhoods <- st_join(nhoods_0, district)
nhoods <-  transform(nhoods, price = as.numeric(price)) %>%
filter(price!= 0) %>%
st_intersection(district)
## do not run
# listing_details <- lapply(listing_details, function(x) {x[x == ""] <- NA})%>%
#    as_data_frame()%>%
#   na.omit()
ggplot()+
geom_sf(data = nhoods)+
geom_sf(data = district , fill = NA)
View(nhoods_0)
knitr::opts_chunk$set(echo = TRUE,warning = FALSE, message = FALSE)
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(viridis)
library(cbsodataR)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette4 <- c("#005B96", "#FFD700", "#E63946", "#F0F0F0")
palette5 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "purple")
palette6 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#F0F0F0")
palette7 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F0F0F0")
palette8 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F4A261", "#F0F0F0")
# import planning district and housing data
district <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/neighbourhoods.geojson") %>%
#dplyr::select(DIST_NAME,ABBREV) %>% #Select data for later prediction
st_transform('EPSG:7415')
nhoods_0 <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415')
nhoods <- st_join(nhoods_0, district)
nhoods <-  transform(nhoods, price = as.numeric(price)) %>%
filter(price!= 0) %>%
st_intersection(district)
## do not run
# listing_details <- lapply(listing_details, function(x) {x[x == ""] <- NA})%>%
#    as_data_frame()%>%
#   na.omit()
ggplot()+
geom_sf(data = nhoods)+
geom_sf(data = district , fill = NA)
# import listing details data
listing_details<- read.csv("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv",na.strings = c("", "NA")) %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(id,host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
#
# ==> 1. host_id：continuous numeric value
# ==> 3. minimum_nights：continuous numeric value
# ==> 4. maximum_nights：continuous numeric value
# ==> 5. accommodates：continuous numeric value
# ==> 7. host_has_profile_pic：2 categories
# ==> 8. is_location_exact：2 categories
# ==> 9. room_type：3 categories
# ==> 10. cancellation_policy：4 categories
# ==> 11. bed_type：5 categories
# ==> 12. property_type：31 categories
# date time calculation
listing_details$host_since <- as.Date(listing_details$host_since, format = "%Y-%m-%d")
target_date <- as.Date("2019-12-31")
listing_details$host_since_days <-  as.numeric(target_date - listing_details$host_since)
#===> Part 2 | 2 columns need to change specific "N/A" value
listing_details<- listing_details%>% mutate(host_response_time = ifelse(host_response_time == 'N/A', 'unknown', host_response_time))
listing_details$host_response_rate <- as.numeric(gsub("%", "", listing_details$host_response_rate))
listing_details <- listing_details %>%
mutate(
host_response_rate = case_when(
host_response_rate %in% 0:1 ~ '~0%',
host_response_rate %in% 2:25 ~ '1-25%',
host_response_rate %in% 26:35 ~ '26-35%',
host_response_rate %in% 36:45 ~ '36-45%',
host_response_rate %in% 46:55 ~ '46-55%',
host_response_rate %in% 56:70 ~ '56-70%',
host_response_rate %in% 71:79 ~ '70-79%',
host_response_rate %in% 80:85 ~ '80-85%',
host_response_rate %in% 86:90 ~ '86-90%',
host_response_rate %in% 91:95 ~ '91-95%',
host_response_rate %in% 96:98 ~ '96-98%',
host_response_rate %in% 99:100 ~ '99-100%',
is.na(host_response_rate) ~ 'no data'))
# ==> Part 3 | 4 columns need to delete a few NA values
listing_details <-  listing_details[!is.na(listing_details$host_since) &
!is.na(listing_details$bathrooms) &
!is.na(listing_details$bedrooms) &
!is.na(listing_details$beds), ]
#======> Part 4 | 3 columns need to delete nearly 2400 in total NA values
listing_details$cleaning_fee <-
as.numeric(gsub("\\$", "", listing_details$cleaning_fee))
listing_details$cleaning_fee[is.na(listing_details$cleaning_fee)] <- 0
listing_details$extra_people <-
as.numeric(gsub("\\$", "", listing_details$extra_people))
listing_details$extra_people[is.na(listing_details$extra_people)] <- 0
listing_details$reviews_per_month[is.na(listing_details$reviews_per_month)] <- 0
# ==> Part 5: array columns
listing_details$host_veri_length <-
sapply(listing_details$host_verification,
function(x) length(strsplit(gsub("\\[|\\]|'", "", x),
",\\s*")[[1]]))
listing_details$amenities_lengths <- sapply(listing_details$amenities, function(x) {
cleaned_content <- gsub("^\\{|\\}$", "", x)
elements <- strsplit(cleaned_content, ",(?=([^\"]*\"[^\"]*\")*[^\"]*$)", perl = TRUE)[[1]]
elements <- trimws(gsub("^\"|\"$", "", elements))
length(elements)
})
listing_details <- listing_details %>%
select(-amenities,-host_verifications,-host_since) %>%
na.omit()
column_names_list <- list(names(listing_details))
#column_names_list
#id,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = district, fill = "grey90") +
geom_sf(data = nhoods, aes(colour = q5(price)),
show.legend = "point", size = .55) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"price"),
name="Quintile\nBreaks") +
labs(title="Airbnb Listed Price, Amsterdam") +
mapTheme()
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
district <-
st_read("https://raw.githubusercontent.com/ObjQIAN/MUSA-508-Midterm/main/data/Planning_Districts.geojson") %>%
dplyr::select(DIST_NAME,ABBREV) %>% #Select data for later prediction
st_transform('ESRI:102729')
nhoods <-
st_read("D:/Upenn/23fall/MUSA5080 Public Policy Analysis/midterm 4-5/studentData.geojson") %>%
st_transform('ESRI:102729')
nhoods <-
st_read("E:\Downloads\studentData.geojson") %>%
# You can set some global options for knitting chunks
knitr::opts_chunk$set(echo = TRUE)
# Load some libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
district <-
st_read("https://raw.githubusercontent.com/ObjQIAN/MUSA-508-Midterm/main/data/Planning_Districts.geojson") %>%
dplyr::select(DIST_NAME,ABBREV) %>% #Select data for later prediction
st_transform('ESRI:102729')
nhoods <-
st_read("E:/Downloads/studentData.geojson") %>%
st_transform('ESRI:102729')
to_predict <-
nhoods %>%
dplyr::filter(toPredict == 'CHALLENGE') #Select data for later prediction
to_train <-
nhoods %>%
dplyr::filter(toPredict == 'MODELLING') #Select data for training Model
#??
#Philadelphia <-
# read.csv(file.path(root.dir,"/Chapter3_4/phillyHousePriceData_clean.csv"))
acsTractsPHL.2020 <-
get_acs(geography = "tract",
variables = c("B25026_001E","B02001_002E",
"B25002_003E", "B25002_001E",
"B15001_050E","B15001_009E",
"B19013_001E","B25058_001E",
"B06012_002E"),
year=2020, state=42, county=101,
geometry=TRUE, output="wide") %>%
st_transform('ESRI:102729') %>%
rename(TotalPop = B25026_001E,
Whites = B02001_002E,
VacantHU = B25002_003E,
TotalHU = B25002_001E,
FemaleBachelors = B15001_050E,
MaleBachelors = B15001_009E,
MedHHInc = B19013_001E,
MedRent = B25058_001E,
TotalPoverty = B06012_002E) %>%
dplyr::select(-NAME, -starts_with("B")) %>%
mutate(pctWhite = ifelse(TotalPop > 0, Whites / TotalPop,0),
pctVacant = ifelse(TotalPop > 0, VacantHU / TotalPop,0),
pctBachelors = ifelse(TotalPop > 0, ((FemaleBachelors + MaleBachelors) / TotalPop),0),
pctPoverty = ifelse(TotalPop > 0, TotalPoverty / TotalPop, 0),
year = "2020") %>%
dplyr::select(-Whites, -FemaleBachelors, -MaleBachelors, -TotalPoverty)
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"B25002_001E", # Estimate of total housing units
"B25002_003E", # Number of vacant housing units
"B19013_001E", # Median HH Income ($)
"B02001_002E", # People describing themselves as "white alone"
"B06009_006E") # Total graduate or professional degree
acsTractsPHL.2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
st_transform('ESRI:102729')
ggplot() +
geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
geom_sf(data = to_train, aes(colour = q5(sale_price)),
show.legend = "point", size = .35) +
scale_colour_manual(values = palette5,
labels=qBr(to_train,"sale_price"),
name="Quintile\nBreaks") +
labs(title="House Sale Price, Philadelphia") +
mapTheme()
# Load crime data
philadelphiCrimes <- read.csv('https://raw.githubusercontent.com/ObjQIAN/MUSA-508-Midterm/main/data/Philadelphia_crime.csv')
# Create sf and select Weapon Violations
philadelphiCrimes.sf <-
philadelphiCrimes %>%
filter(text_general_code == "Weapon Violations",
lat > -1) %>%
dplyr::select(lat, lng) %>%
na.omit() %>%
st_as_sf(coords = c( "lng","lat"), crs = "EPSG:4326") %>%
st_transform('ESRI:102729') %>%
distinct()
# Load 311 data
philadelphia311.sf <- read.csv('https://phl.carto.com/api/v2/sql?filename=public_cases_fc&format=csv&skipfields=cartodb_id,the_geom,the_geom_webmercator&q=SELECT%20*%20FROM%20public_cases_fc%20WHERE%20requested_datetime%20%3E=%20%272022-01-01%27%20AND%20requested_datetime%20%3C%20%272023-01-01%27') %>%
dplyr::select(lat, lon) %>%
na.omit() %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, agr = "constant") %>%
st_transform('ESRI:102729')
# Counts of crime per buffer of house sale
to_train$crimes.Buffer <- to_train %>%
st_buffer(660) %>%
aggregate(mutate(philadelphiCrimes.sf, counter = 1),., sum) %>%
pull(counter)
## Nearest Neighbor Feature
to_train <-
to_train %>%
mutate(
crime_nn1 = nn_function(st_coordinates(to_train),
st_coordinates(philadelphiCrimes.sf), k = 1),
crime_nn2 = nn_function(st_coordinates(to_train),
st_coordinates(philadelphiCrimes.sf), k = 2),
crime_nn3 = nn_function(st_coordinates(to_train),
st_coordinates(philadelphiCrimes.sf), k = 3),
crime_nn4 = nn_function(st_coordinates(to_train),
st_coordinates(philadelphiCrimes.sf), k = 4),
crime_nn5 = nn_function(st_coordinates(to_train),
st_coordinates(philadelphiCrimes.sf), k = 5))
## Plot assault density
ggplot() + geom_sf(data = acsTractsPHL.2020, fill = "grey40") +
stat_density2d(data = data.frame(st_coordinates(philadelphiCrimes.sf)),
aes(X, Y, fill = ..level.., alpha = ..level..),
size = 0.01, bins = 40, geom = 'polygon') +
scale_fill_gradient(low = "#25CB10", high = "#FA7800", name = "Density") +
scale_alpha(range = c(0.00, 0.35), guide = "none") +
labs(title = "Density of WA, PHL") +
mapTheme()
# Counts of 311 per buffer of house sale
to_train$philly311.Buffer <- to_train %>%
st_buffer(660) %>%
aggregate(mutate(philadelphia311.sf, counter = 1),., sum) %>%
pull(counter)
