library(tidyverse)
library(tidycensus)
library(sf)
library(spdep)
library(caret)
library(ckanr)
library(FNN)
library(grid)
library(gridExtra)
library(ggcorrplot) # plot correlation plot
library(corrr)      # another way to plot correlation plot
library(kableExtra)
library(broom)
library(tufte)
library(rmarkdown)
library(viridis)
library(cbsodataR)
library(jtools)     # for regression model plots
library(ggstance) # to support jtools plots
library(ggpubr)    # plotting R^2 value on ggplot point scatter
library(broom.mixed) # needed for effects plots
library(stargazer)
# functions and data directory
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette4 <- c("#005B96", "#FFD700", "#E63946", "#F0F0F0")
palette5 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "purple")
palette6 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#F0F0F0")
palette7 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F0F0F0")
palette8 <- c("#005B96", "#FFD700", "#E63946", "#2A9D8F", "#264653", "#E76F51", "#F4A261", "#F0F0F0")
# import planning district and housing data
district <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/neighbourhoods.geojson") %>%
#dplyr::select(DIST_NAME,ABBREV) %>% #Select data for later prediction
st_transform('EPSG:7415')
nhoods_0 <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings.csv") %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415')
housing_value <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/housing_value_ams.geojson") %>%
st_transform('EPSG:7415') %>%
select(AvrVal)
housing_value$ID0 <- seq.int(nrow(housing_value))
housing_value_df <- housing_value %>% st_drop_geometry()
nhoods <- st_join(nhoods_0, district)
nhoods <-  transform(nhoods, price = as.numeric(price)) %>%
filter(price!= 0) %>%
st_intersection(district)
## do not run
# listing_details <- lapply(listing_details, function(x) {x[x == ""] <- NA})%>%
#    as_data_frame()%>%
#   na.omit()
ggplot()+
geom_sf(data = nhoods)+
geom_sf(data = district , fill = NA)
# import listing details data
listing_details<- read.csv("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/listings_details.csv",na.strings = c("", "NA")) %>%
st_as_sf(coords=c("longitude","latitude"), crs=4326) %>%
st_transform('EPSG:7415') %>%
select(id,host_id,host_since,host_response_time,host_response_rate,host_listings_count,host_verifications,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,amenities,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month )
#
# ==> 1. host_id：continuous numeric value
# ==> 3. minimum_nights：continuous numeric value
# ==> 4. maximum_nights：continuous numeric value
# ==> 5. accommodates：continuous numeric value
# ==> 7. host_has_profile_pic：2 categories
# ==> 8. is_location_exact：2 categories
# ==> 9. room_type：3 categories
# ==> 10. cancellation_policy：4 categories
# ==> 11. bed_type：5 categories
# ==> 12. property_type：31 categories
# date time calculation
listing_details$host_since <- as.Date(listing_details$host_since, format = "%Y-%m-%d")
target_date <- as.Date("2019-12-31")
listing_details$host_since_days <-  as.numeric(target_date - listing_details$host_since)
#===> Part 2 | 2 columns need to change specific "N/A" value
listing_details<- listing_details%>% mutate(host_response_time = ifelse(host_response_time == 'N/A', 'unknown', host_response_time))
listing_details$host_response_rate <- as.numeric(gsub("%", "", listing_details$host_response_rate))
listing_details <- listing_details %>%
mutate(
host_response_rate = case_when(
host_response_rate %in% 0:1 ~ '~0%',
host_response_rate %in% 2:25 ~ '1-25%',
host_response_rate %in% 26:35 ~ '26-35%',
host_response_rate %in% 36:45 ~ '36-45%',
host_response_rate %in% 46:55 ~ '46-55%',
host_response_rate %in% 56:70 ~ '56-70%',
host_response_rate %in% 71:79 ~ '70-79%',
host_response_rate %in% 80:85 ~ '80-85%',
host_response_rate %in% 86:90 ~ '86-90%',
host_response_rate %in% 91:95 ~ '91-95%',
host_response_rate %in% 96:98 ~ '96-98%',
host_response_rate %in% 99:100 ~ '99-100%',
is.na(host_response_rate) ~ 'no data'))
# ==> Part 3 | 4 columns need to delete a few NA values
listing_details <-  listing_details[!is.na(listing_details$host_since) &
!is.na(listing_details$bathrooms) &
!is.na(listing_details$bedrooms) &
!is.na(listing_details$beds), ]
#======> Part 4 | 3 columns need to delete nearly 2400 in total NA values
listing_details$cleaning_fee <-
as.numeric(gsub("\\$", "", listing_details$cleaning_fee))
listing_details$cleaning_fee[is.na(listing_details$cleaning_fee)] <- 0
listing_details$extra_people <-
as.numeric(gsub("\\$", "", listing_details$extra_people))
listing_details$extra_people[is.na(listing_details$extra_people)] <- 0
listing_details$reviews_per_month[is.na(listing_details$reviews_per_month)] <- 0
# ==> Part 5: array columns
listing_details$host_veri_length <-
sapply(listing_details$host_verification,
function(x) length(strsplit(gsub("\\[|\\]|'", "", x),
",\\s*")[[1]]))
listing_details$amenities_lengths <- sapply(listing_details$amenities, function(x) {
cleaned_content <- gsub("^\\{|\\}$", "", x)
elements <- strsplit(cleaned_content, ",(?=([^\"]*\"[^\"]*\")*[^\"]*$)", perl = TRUE)[[1]]
elements <- trimws(gsub("^\"|\"$", "", elements))
length(elements)
})
listing_details <- listing_details %>%
select(-amenities,-host_verifications,-host_since) %>%
na.omit()
column_names_list <- list(names(listing_details))
#column_names_list
#id,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths
temp_nearest <- st_nearest_feature(nhoods,housing_value) %>% as_data_frame()%>%rename(ID0 = value)%>%left_join(housing_value_df, by = 'ID0')
nhoods <- cbind(nhoods, temp_nearest)
# ggplot, reorder
# Mapping data
ggplot() +
geom_sf(data = district, fill = "grey90") +
geom_sf(data = nhoods, aes(colour = q5(price)),
show.legend = "point", size = .55) +
scale_colour_manual(values = palette5,
labels=qBr(nhoods,"price"),
name="Quintile\nBreaks") +
labs(title="Airbnb Listed Price, Amsterdam") +
mapTheme()
# 1.Load high-rise data with 3 attributes: height, year, and geometry
highrise.sf <-
st_read("https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=HOOGBOUW_PUNT&THEMA=hoogbouw") %>%
dplyr::select(Hoogte, Jaar, geometry) %>%
rename(
height = Hoogte,
year = Jaar
)%>%
st_transform('EPSG:7415')
# 2.Load green roof data with 2 attributes
greenroof.sf <-
st_read("https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=GROENE_DAKEN&THEMA=groene_daken") %>%
dplyr::select(Oppervlakte_m2, geometry) %>%
rename(surface = Oppervlakte_m2)%>%
st_transform('EPSG:7415')
# 3.Load wall art data
wallart.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=WANDKUNST&THEMA=wandkunst')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 4.Load market data
market.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=MARKTEN&THEMA=markten')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 5.Load swimming water data
swimming.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_lnglat.php?KAARTLAAG=ZWEMWATER&THEMA=zwemwater')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 6.Load tram and metro data
tram_metro.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=TRAMMETRO_LIJNEN_2022&THEMA=trammetro')%>%
dplyr::select(Modaliteit, geometry) %>%
rename(modality = Modaliteit)%>%
st_transform('EPSG:7415')
# 7.Load flood data
flood.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=KLIMAAT_OVERSTROMING&THEMA=klimaatadaptatie')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 8.Load parking pressure data
parking.sf <- st_read('https://maps.amsterdam.nl/open_geodata/geojson_latlng.php?KAARTLAAG=PARKEERDRUK_BUURTEN&THEMA=parkeerdruk')%>%
dplyr::select(geometry) %>%
st_transform('EPSG:7415')
# 1.high-rise
nhoods$highrise.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(highrise.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
highrise_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 1),
highrise_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 2),
highrise_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 3),
highrise_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 4),
highrise_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(highrise.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("highrise_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of high-rise") +
theme_light()
# 2.green roofs
nhoods$greenroof.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(greenroof.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
greenroof_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 1),
greenroof_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 2),
greenroof_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 3),
greenroof_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 4),
greenroof_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(greenroof.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("greenroof_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of green roofs") +
theme_light()
# 3.wall art
nhoods$wallart.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(wallart.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
wallart_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 1),
wallart_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 2),
wallart_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 3),
wallart_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 4),
wallart_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("wallart_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of wall art") +
theme_light()
# 4.wall art
nhoods$wallart.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(wallart.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
wallart_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 1),
wallart_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 2),
wallart_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 3),
wallart_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 4),
wallart_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(wallart.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("wallart_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of wall art") +
theme_light()
# 4.market data
nhoods$market.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(market.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
market_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 1),
market_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 2),
market_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 3),
market_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 4),
market_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(market.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("market_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of markets") +
theme_light()
# 5.swimming pool data
nhoods$swimming.Buffer <- nhoods %>%
st_buffer(660) %>%
aggregate(mutate(swimming.sf, counter = 1),., sum) %>%
pull(counter)
nhoods <-
nhoods %>%
mutate(
swimming_nn1 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 1),
swimming_nn2 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 2),
swimming_nn3 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 3),
swimming_nn4 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 4),
swimming_nn5 = nn_function(st_coordinates(st_centroid(nhoods)), st_coordinates(st_centroid(swimming.sf)), 5))
nhoods %>%
st_drop_geometry() %>%
dplyr::select(price, starts_with("swimming_")) %>%
filter(price <= 1000000) %>%
gather(Variable, Value, -price) %>%
ggplot(aes(Value, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
facet_wrap(~Variable, nrow = 1, scales = "free") +
labs(title = "Price as a function of swimming pools") +
theme_light()
nhoods %>%
st_drop_geometry() %>%
ggplot(aes(AvrVal, price)) +
geom_point(size = .5) +
geom_smooth(data = . %>% filter(price > 0), method = "lm", se=F, colour = "#005B96") +
labs(title = "Price as a function of House Price") +
theme_light()
# Load acs data, need data selection here
ams_census <-
st_read("https://raw.githubusercontent.com/ObjQIAN/Airbnb_AMS/main/data/ams_census.geojson") %>%
st_transform('EPSG:7415') %>%
rename(residents = aantal_inwoners,
male_residents = aantal_mannen,
famale_residents = aantal_vrouwen,
pct_dutch_bkg = percentage_nederlandse_achtergrond,
pct_wes_bkg = percentage_westerse_migr_achtergr,
pct_nonwes_bkg = percentage_niet_westerse_migr_achtergr,
avr_fam_size = gemiddelde_huishoudensgrootte,
low_income_pct = percentage_laag_inkomen_huishouden,
high_income_pct = percentage_hoog_inkomen_huishouden,
median_HH = mediaan_inkomen_huishouden,
rental_home =percentage_huurwoningen,
rental_corp = aantal_huurwoningen_in_bezit_woningcorporaties,
owned_pct = percentage_koopwoningen,
not_ocp_home =aantal_niet_bewoonde_woningen,
gas_using = gemiddeld_gasverbruik_woning,
zip_house_value = gemiddelde_woz_waarde_woning,
elec_using = gemiddeld_elektriciteitsverbruik_woning,
dis_to_train = dichtstbijzijnde_treinstation_afstand_in_km,
dis_to_sub = dichtstbijzijnde_overstapstation_afstand_in_km,
fire_station = dichtstbijzijnde_brandweerkazerne_afstand_in_km,
daycare_num = kinderdagverblijf_aantal_binnen_3_km,
)%>%
dplyr::select(postcode4,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents)
nhoods <- st_join(nhoods,ams_census)
#daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents
nhoods_sub <- nhoods%>%
select(id,price, neighbourhood, postcode4,number_of_reviews,calculated_host_listings_count,AvrVal,highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents) %>%st_drop_geometry()
nhoods_sub <-transform(nhoods_sub, id = as.numeric(id))
nhoods <-transform(nhoods, id = as.numeric(id))
nhoods_sub <- left_join(listing_details, nhoods_sub, by = 'id')
#nhoods_sub <- transform(nhoods_sub,extra_people = as.numeric(extra_people))
numericVars <-
select_if(st_drop_geometry(nhoods_sub), is.numeric) %>% na.omit()
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("darkred", "white", "green"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables")
#nhoods<- left_join(listing_details,nhoods,by = 'id')
inTrain <- createDataPartition(
y = paste(nhoods_sub$property_type),
p = .70, list = FALSE)
ams.training <- nhoods_sub[inTrain,]
ams.test <- nhoods_sub[-inTrain,]
#temp
#  host_response_time,host_response_rate,amenities,
reg.training <-
lm(price ~ ., data = as.data.frame(ams.training) %>%
dplyr::select(price, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths))
#extra_people,host_since,
reg2 <-
lm(price ~ ., data = as.data.frame(ams.training) %>%
dplyr::select(price,neighbourhood,postcode4, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,pct_dutch_bkg,pct_nonwes_bkg,avr_fam_size,low_income_pct,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths))
ams.test <-
ams.test %>%  dplyr::select(price,postcode4, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths)%>%
na.omit()
ams.test <- ams.test %>%
mutate(Regression = "Baseline Regression",
listing_price.Predict = predict(reg.training, ams.test),
listing_price.Error = listing_price.Predict - price,
listing_price.AbsError = abs(listing_price.Predict - price),
listing_price.APE = (abs(listing_price.Predict - price)) / listing_price.Predict)
ams.test %>%
st_drop_geometry() %>%
summarise(MAE = mean(listing_price.AbsError),
MAPE = mean(abs(listing_price.APE)*100)) %>%
kbl(col.name=c('Mean Absolute Error','Mean Absolute Percentage Error')) %>%
kable_classic()
ggplot(ams.test)+
geom_sf(aes(colour = listing_price.APE))+
geom_sf(data = district,fill = NA)+
scale_fill_viridis()+
labs(title = "MAE distribution") +
mapTheme()
summary(reg.training)
"percentage_laag_inkomen_huishouden"                    "ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("darkred", "white", "green"),
ggcorrplot(
round(cor(numericVars), 1),
p.mat = cor_pmat(numericVars),
colors = c("darkred", "white", "green"),
type="lower",
insig = "blank") +
labs(title = "Correlation across numeric variables")
#nhoods<- left_join(listing_details,nhoods,by = 'id')
inTrain <- createDataPartition(
y = paste(nhoods_sub$property_type),
p = .70, list = FALSE)
ams.training <- nhoods_sub[inTrain,]
ams.test <- nhoods_sub[-inTrain,]
#temp
#  host_response_time,host_response_rate,amenities,
reg.training <-
lm(price ~ ., data = as.data.frame(ams.training) %>%
dplyr::select(price, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths))
#extra_people,host_since,
reg2 <-
lm(price ~ ., data = as.data.frame(ams.training) %>%
dplyr::select(price,neighbourhood,postcode4, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,pct_dutch_bkg,pct_nonwes_bkg,avr_fam_size,low_income_pct,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths))
ams.test <-
ams.test %>%  dplyr::select(price,postcode4,neighbourhood, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths)%>%
na.omit()
ams.test <- ams.test %>%
mutate(Regression = "Baseline Regression",
listing_price.Predict = predict(reg.training, ams.test),
listing_price.Error = listing_price.Predict - price,
listing_price.AbsError = abs(listing_price.Predict - price),
listing_price.APE = (abs(listing_price.Predict - price)) / listing_price.Predict)
ams.test %>%
st_drop_geometry() %>%
summarise(MAE = mean(listing_price.AbsError),
MAPE = mean(abs(listing_price.APE)*100)) %>%
kbl(col.name=c('Mean Absolute Error','Mean Absolute Percentage Error')) %>%
kable_classic()
#nhoods<- left_join(listing_details,nhoods,by = 'id')
inTrain <- createDataPartition(
y = paste(nhoods_sub$property_type),
p = .70, list = FALSE)
ams.training <- nhoods_sub[inTrain,]
ams.test <- nhoods_sub[-inTrain,]
#temp
#  host_response_time,host_response_rate,amenities,
reg.training <-
lm(price ~ ., data = as.data.frame(ams.training) %>%
dplyr::select(price, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths))
#extra_people,host_since,
reg2 <-
lm(price ~ ., data = as.data.frame(ams.training) %>%
dplyr::select(price,neighbourhood,postcode4, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,pct_dutch_bkg,pct_nonwes_bkg,avr_fam_size,low_income_pct,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths))
ams.test <-
ams.test %>%  dplyr::select(price,postcode4,neighbourhood, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths)%>%
na.omit()
ams.test <- ams.test %>%
mutate(Regression = "Baseline Regression",
listing_price.Predict = predict(reg.training, ams.test),
listing_price.Error = listing_price.Predict - price,
listing_price.AbsError = abs(listing_price.Predict - price),
listing_price.APE = (abs(listing_price.Predict - price)) / listing_price.Predict)
ams.test %>%
st_drop_geometry() %>%
summarise(MAE = mean(listing_price.AbsError),
MAPE = mean(abs(listing_price.APE)*100)) %>%
kbl(col.name=c('Mean Absolute Error','Mean Absolute Percentage Error')) %>%
kable_classic()
summary(reg.training)
#nhoods<- left_join(listing_details,nhoods,by = 'id')
inTrain <- createDataPartition(
y = paste(nhoods_sub$property_type),
p = .70, list = FALSE)
ams.training <- nhoods_sub[inTrain,]
ams.test <- nhoods_sub[-inTrain,]
#temp
#  host_response_time,host_response_rate,amenities,
reg.training <-
lm(price ~ ., data = as.data.frame(ams.training) %>%
dplyr::select(price, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths))
#extra_people,host_since,
reg2 <-
lm(price ~ ., data = as.data.frame(ams.training) %>%
dplyr::select(price,neighbourhood,postcode4, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,pct_dutch_bkg,pct_nonwes_bkg,avr_fam_size,low_income_pct,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths))
ams.test <-
ams.test %>%  dplyr::select(price,postcode4,neighbourhood, highrise_nn3,greenroof_nn3,wallart_nn3,market_nn3,swimming_nn3,daycare_num,fire_station,dis_to_sub,dis_to_train,elec_using,zip_house_value,gas_using,not_ocp_home,owned_pct,rental_corp,rental_home,median_HH,high_income_pct,low_income_pct,avr_fam_size,pct_nonwes_bkg,pct_wes_bkg,pct_dutch_bkg,famale_residents,male_residents,residents,AvrVal,host_id,host_response_time,host_response_rate,host_listings_count,host_has_profile_pic,is_location_exact,property_type,room_type,accommodates,bathrooms,bedrooms,beds,bed_type,cleaning_fee,extra_people,minimum_nights,maximum_nights,cancellation_policy,review_scores_rating,reviews_per_month,host_since_days,host_veri_length,amenities_lengths)%>%
na.omit()
ams.test <- ams.test %>%
mutate(Regression = "Baseline Regression",
listing_price.Predict = predict(reg.training, ams.test),
listing_price.Error = listing_price.Predict - price,
listing_price.AbsError = abs(listing_price.Predict - price),
listing_price.APE = (abs(listing_price.Predict - price)) / listing_price.Predict)
ams.test %>%
st_drop_geometry() %>%
summarise(MAE = mean(listing_price.AbsError),
MAPE = mean(abs(listing_price.APE)*100)) %>%
kbl(col.name=c('Mean Absolute Error','Mean Absolute Percentage Error')) %>%
kable_classic()
